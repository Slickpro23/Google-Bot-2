# API_TOKEN = '7073415062:AAFbuyp-dL4da9BFPO1zaF3yc28tQy2A10Y'
import telebot
import datetime
import mysql.connector
from google.oauth2 import service_account
from googleapiclient.discovery import build
from telebot import types

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL
mydb = mysql.connector.connect(
    host="akueyoungep.beget.app",
    port="3306",
    user="mymoney",
    password="g0MSegH7sZT*",
    database="mymoney",
    autocommit=True
)
if mydb.is_connected():
    print("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL")
    cursor = mydb.cursor()
    # –ö–æ–º–∞–Ω–¥–∞ SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã "IDGOOGLE", –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    create_table_query_idgoogle = """
        CREATE TABLE IF NOT EXISTS IDGOOGLE (numb INT AUTO_INCREMENT PRIMARY KEY, Id_google TEXT, Id_telegram INT)"""
    # –ö–æ–º–∞–Ω–¥–∞ SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã "PAY", –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    create_table_query_pay = '''
        CREATE TABLE IF NOT EXISTS PAY (id INT AUTO_INCREMENT PRIMARY KEY, telegram VARCHAR(255), name VARCHAR(255), 
        info VARCHAR(255), sum FLOAT, data DATETIME)'''
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    cursor.execute(create_table_query_idgoogle)
    cursor.execute(create_table_query_pay)
    mydb.commit()
    print("–¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('7073415062:AAFbuyp-dL4da9BFPO1zaF3yc28tQy2A10Y')
# –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è Google Calendar API
creds = service_account.Credentials.from_service_account_file('callbot.json')
service = build('calendar', 'v3', credentials=creds)
if service:
    print("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –°–µ—Ä–≤–∏—Å—É")
user_data = {}
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL
def check_db_connection():
    global mydb
    try:
        mydb.ping(reconnect=True)
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL –∞–∫—Ç–∏–≤–Ω–æ")
    except mysql.connector.Error as e:
        print("–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö MySQL. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        mydb = mysql.connector.connect(
            host="akueyoungep.beget.app",
            port="3306",
            user="mymoney",
            password="g0MSegH7sZT*",
            database="mymoney",
            autocommit=True
        )
        print("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL")
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö MySQL
def save_to_mysql(calendar_id, telegram_user_id):
    check_db_connection()
    cursor = mydb.cursor()
    try:
        sql = "INSERT INTO IDGOOGLE (Id_google, id_telegram) VALUES (%s, %s)"
        val = (calendar_id, telegram_user_id)
        cursor.execute(sql, val)
        print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö MySQL")
    except mysql.connector.Error as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö MySQL:", error)
    finally:
        cursor.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "start"
@bot.message_handler(commands=['start'])
def start(message, user_id=None):
    check_db_connection()
    chat_id = message.chat.id
    cursor = mydb.cursor()
    cursor.execute("SELECT * FROM IDGOOGLE WHERE id_telegram = %s", (chat_id,))
    result = cursor.fetchone()

    if result:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.send_message(chat_id=chat_id, text=(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å:\n"
        "/clients - üìì –ö–õ–ò–ï–ù–¢–´\n"
        "/week_events - üóì –†–ê–°–ü–ò–°–ê–ù–ò–ï –ù–ê –ù–ï–î–ï–õ–Æ\n"
        "/pay_menu - üíµ –û–ø–ª–∞—Ç—ã\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    ))
    else:
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–¥—É—â–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:")
        bot.register_next_step_handler(message, request_calendar_email)
def request_calendar_email(message):
    chat_id = message.chat.id
    calendar_name = message.text
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é:")
    user_data[chat_id] = {"calendar_name": calendar_name}
    bot.register_next_step_handler(message, create_calendar)
def create_calendar(message):
    chat_id = message.chat.id
    calendar_email = message.text
    calendar_name = user_data[chat_id]["calendar_name"] + " " + calendar_email
    # –£–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–æ—Å–∫–≤—ã (GMT+03:00)
    calendar = {
        'summary': calendar_name,
        'timeZone': 'Europe/Moscow'
    }

    created_calendar = service.calendars().insert(body=calendar).execute()
    calendar_id = created_calendar["id"]
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    rule = {
        'scope': {
            'type': 'user',
            'value': calendar_email
        },
        'role': 'owner'  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞
    }
    service.acl().insert(calendarId=calendar_id, body=rule).execute()
    save_to_mysql(calendar_id, chat_id)
    calendar_link = f'https://calendar.google.com/calendar/r?cid={calendar_id}'
    bot.send_message(chat_id,
                     f'–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–∑–¥–∞–Ω! \n'
                     f'ID –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {calendar_id}\n\n'
                     f'–í–ê–ñ–ù–û - –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –µ–≥–æ –∞ –ø–æ—Ç–æ–º –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ\n'
                     f'üëâ {calendar_link}\n\n'
                     f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ—á—Ç–æ–π \n{calendar_email}\n'
                     f'–ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é.\n\n'
                     f'–í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Å–≤–æ—é –ø–æ—á—Ç—É —á—Ç–æ —É–∫–∞–∑–∞–ª–∏ –±–æ—Ç—É\n'
                     f'–ù–∞ –Ω–µ—ë –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–¥–æ–±–∞–≤–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å" –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n\n'
                     f'–ï—Å–ª–∏ –≤—ã –≤—Å–µ —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Ç–æ –≤ —Å–ø–∏—Å–∫–µ –≤–∞—à–∏—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π –ø–æ—è–≤–∏—Ç—Å—è —Ç–æ—Ç, —á—Ç–æ –≤—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏.\n'
                     f'–°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ì—É–≥–ª –∫–∞–ª–µ–Ω–¥–∞—Ä—å\n')

    bot.send_message(chat_id, text=(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å:\n"
        "/clients - üìì –ö–õ–ò–ï–ù–¢–´\n"
        "/week_events - üóì –†–ê–°–ü–ò–°–ê–ù–ò–ï –ù–ê –ù–ï–î–ï–õ–Æ\n"
        "/pay_menu - üíµ –û–ø–ª–∞—Ç—ã\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    ))
###################
@bot.callback_query_handler(func=lambda call: call.data == 'menu')
def menu_handler(call):
    bot.send_message(chat_id=call.message.chat.id, text=(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å:\n"
        "/clients - üìì –ö–õ–ò–ï–ù–¢–´\n"
        "/week_events - üóì –†–ê–°–ü–ò–°–ê–ù–ò–ï –ù–ê –ù–ï–î–ï–õ–Æ\n"
        "/pay_menu - üíµ –û–ø–ª–∞—Ç—ã\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    ))
##### –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
# 25053ebce773d294cfdd4c20e90ff9edbcbf5c30aaa4f6ce7b753dc359d7a0fc@group.calendar.google.com
def get_events(user_id):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL
    mydb = mysql.connector.connect(
        host="akueyoungep.beget.app",
        port="3306",
        user="mymoney",
        password="g0MSegH7sZT*",
        database="mymoney",
        autocommit=True
    )
    if mydb.is_connected():
        print("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL")
    # –ü–æ–ª—É—á–µ–Ω–∏–µ calendarId –∏–∑ —Ç–∞–±–ª–∏—Ü—ã IDGOOGLE
    cursor = mydb.cursor()
    select_query = "SELECT Id_google FROM IDGOOGLE WHERE Id_telegram = %s"
    cursor.execute(select_query, (user_id,))
    id_google_result = cursor.fetchone()
    mydb.commit()
    if id_google_result:
        calendar_id = id_google_result[0]
        today = datetime.datetime.now()
        four_months_ago = today - datetime.timedelta(days=6 * 30)  # 6 months = 4 * 30 days
        time_min = four_months_ago.isoformat() + 'Z'
        events_result = service.events().list(
            calendarId=calendar_id,
            timeMin=time_min,
            maxResults=2500,
            singleEvents=True,
            orderBy='startTime'
        ).execute()
        events = events_result.get('items', [])
        formatted_events = []
        for event in events:
            event_summary = event.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            event_start = event.get('start', {}).get('dateTime')
            event_description = event.get('description', '-')
            event_location = event.get('location', '-')
            event_info = {
                '–ö–ª–∏–µ–Ω—Ç': event_summary,
                '–î–∞—Ç–∞': None,
                '–í—Ä–µ–º—è': None,
                '–ü–¢': event_description,
                '–°—É–º–º–∞': event_location
            }
            if event_start:
                event_datetime = datetime.datetime.strptime(event_start, "%Y-%m-%dT%H:%M:%S%z")
                event_info['–î–∞—Ç–∞'] = event_datetime.strftime("%d.%m.%Y")
                event_info['–í—Ä–µ–º—è'] = event_datetime.strftime("%H:%M")
            formatted_events.append(event_info)
        return formatted_events
    else:
        return []
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "/get_events"
@bot.message_handler(commands=['get_events'])
def send_events(message):
    # Get the user id
    user_id = message.from_user.id
    # Get the events for the user
    events = get_events(user_id)
    if len(events) == 0:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
    else:
        reply_message = "–í—Å–µ –≤–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞ 6 –º–µ—Å—è—Ü–µ–≤:\n\n"
        for event in events:
            event_message = f"üîπ {event['–ö–ª–∏–µ–Ω—Ç']}\n"
            event_message += f"üìÖ {event['–î–∞—Ç–∞']}"
            event_message += f"  {event['–í—Ä–µ–º—è']}"
            event_message += f"  {event['–ü–¢']}"
            event_message += f"  {event['–°—É–º–º–∞']}\n\n"
            # Splitting the message into chunks if it is too long
            if len(reply_message + event_message) > 4096:
                bot.reply_to(message, reply_message)
                reply_message = ""
            reply_message += event_message
        bot.reply_to(message, reply_message)
#/week_events
def week_events(user_id):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL
    mydb = mysql.connector.connect(
        host="akueyoungep.beget.app",
        port="3306",
        user="mymoney",
        password="g0MSegH7sZT*",
        database="mymoney",
        autocommit=True
    )
    if mydb.is_connected():
        print("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL")
    # –ü–æ–ª—É—á–µ–Ω–∏–µ calendarId –∏–∑ —Ç–∞–±–ª–∏—Ü—ã IDGOOGLE
    cursor = mydb.cursor()
    select_query = "SELECT Id_google FROM IDGOOGLE WHERE Id_telegram = %s"
    cursor.execute(select_query, (user_id,))
    id_google_result = cursor.fetchone()
    mydb.commit()
    if id_google_result:
        calendar_id = id_google_result[0]
        events_result = service.events().list(
            calendarId=calendar_id,
            timeMin='2023-04-04T00:00:00Z',
            maxResults=2500,
            singleEvents=True,
            orderBy='startTime'
        ).execute()
        events = events_result.get('items', [])
        formatted_events = []
        for event in events:
            event_summary = event.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            event_start = event.get('start', {}).get('dateTime')
            event_description = event.get('description', '-')
            event_location = event.get('location', '-')
            event_info = {
                '–ö–ª–∏–µ–Ω—Ç': event_summary,
                '–î–∞—Ç–∞': None,
                '–í—Ä–µ–º—è': None,
                '–ü–¢': event_description,
                '–°—É–º–º–∞': event_location
            }
            if event_start:
                event_datetime = datetime.datetime.strptime(event_start, "%Y-%m-%dT%H:%M:%S%z")
                event_info['–î–∞—Ç–∞'] = event_datetime.strftime("%d.%m.%Y")
                event_info['–í—Ä–µ–º—è'] = event_datetime.strftime("%H:%M")
            formatted_events.append(event_info)
        return formatted_events
    else:
        return []
@bot.message_handler(commands=['week_events'])
def send_week_events(message):
    user_id = message.from_user.id
    # –ü–æ–ª—É—á–µ–Ω–∏–µ events –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
    today = datetime.date.today()
    start_of_week = today - datetime.timedelta(days=today.weekday())
    end_of_week = start_of_week + datetime.timedelta(days=6)
    events = week_events(user_id)
    events_this_week = [event for event in events if start_of_week <= datetime.datetime.strptime(event['–î–∞—Ç–∞'], "%d.%m.%Y").date() <= end_of_week]
    if len(events_this_week) == 0:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ.")
    else:
        # Create a dictionary to group events by days of the week
        events_by_day = {}
        for event in events_this_week:
            event_date = datetime.datetime.strptime(event['–î–∞—Ç–∞'], "%d.%m.%Y").date()
            day_of_week = event_date.strftime('%A')
            if day_of_week not in events_by_day:
                events_by_day[day_of_week] = []
            events_by_day[day_of_week].append(event)
        # Prepare the reply message
        reply_message = "–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è:\n"
        for day, events in events_by_day.items():
            reply_message += f"\n      üìù{day} - {events[0]['–î–∞—Ç–∞']} \n"
            for event in events:
                event_message = f"üîπ {event['–ö–ª–∏–µ–Ω—Ç']}"
                event_message += f" - {event['–í—Ä–µ–º—è']}\n"
                # Splitting the message into chunks if it is too long
                if len(reply_message + event_message) > 4096:
                    bot.reply_to(message, reply_message)
                    reply_message = ""
                reply_message += event_message
        # Add the count of events to the reply message
        reply_message += f"\n–ù–∞ –Ω–µ–¥–µ–ª–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {sum(len(events) for events in events_by_day.values())} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É "–ù–∞–∑–∞–¥"
        back_keyboard = types.InlineKeyboardMarkup()
        menu_button = types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—Å—è –≤ –ú–µ–Ω—é", callback_data="menu")
        back_keyboard.add(menu_button)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π "–ù–∞–∑–∞–¥"
        bot.reply_to(message, reply_message, reply_markup=back_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "/clients"
@bot.message_handler(commands=['clients'])
def send_event_names(message):
    user_id = message.chat.id
    events = get_events(user_id)
    if len(events) == 0:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
    else:
        sorted_events = sorted(events, key=lambda event: datetime.datetime.strptime(event['–î–∞—Ç–∞'], '%d.%m.%Y'))
        event_names = list(set([event['–ö–ª–∏–µ–Ω—Ç'] for event in sorted_events]))
        event_names_message = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤üìì\n\n"
        chunks = [event_names[i:i + 30] for i in range(0, len(event_names), 30)]
        for chunk in chunks:
            keyboard = types.InlineKeyboardMarkup()
            for event_name in chunk:
                button = types.InlineKeyboardButton(text=event_name, callback_data=event_name)
                keyboard.add(button)
            bot.send_message(message.chat.id, event_names_message, reply_markup=keyboard)
        last_entry_date = datetime.datetime.strptime(sorted_events[-1]['–î–∞—Ç–∞'], '%d.%m.%Y')
        last_entry_message = f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞ {last_entry_date.strftime('%d.%m.%Y')}"
        bot.send_message(message.chat.id, last_entry_message)
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    event_name = call.data
    user_id = call.from_user.id  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ user_id –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –æ–±—ä–µ–∫—Ç–µ call
    events = get_events(user_id)
    # –§–∏–ª—å—Ç—Ä—É–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
    selected_events = [event for event in events if event['–ö–ª–∏–µ–Ω—Ç'] == event_name]
    if len(selected_events) == 0:
        bot.send_message(call.message.chat.id, "–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º.")
    else:
        event_details_message = f"üìò {event_name}:\n"
        weekday_mapping = {
            'Monday': '–ü–ù',
            'Tuesday': '–í–¢',
            'Wednesday': '–°–†',
            'Thursday': '–ß–¢',
            'Friday': '–ü–¢',
            'Saturday': '–°–ë',
            'Sunday': '–í–°'
        }
        passed_events_count = 0
        upcoming_events_count = 0
        for event in selected_events:
            date = event['–î–∞—Ç–∞']
            formatted_date = datetime.datetime.strptime(date, '%d.%m.%Y').strftime('%d.%m.%Y')
            weekday = datetime.datetime.strptime(date, '%d.%m.%Y').strftime('%A')
            weekday_short = weekday_mapping.get(weekday, weekday)
            time = event['–í—Ä–µ–º—è']
            status = event['–ü–¢']
            event_details_message += f"\nüìÖ {formatted_date}  {weekday_short}  {time}  {status}"
            current_date = datetime.datetime.now().date()
            event_date = datetime.datetime.strptime(date, '%d.%m.%Y').date()
            if event_date < current_date:
                passed_events_count += 1
            else:
                upcoming_events_count += 1
        # Split the event details message into chunks
        max_length = 4080
        while event_details_message:
            chunk = event_details_message[:max_length]
            event_details_message = event_details_message[max_length:]
            bot.send_message(call.message.chat.id, chunk)
        summary_message = f"‚úîÔ∏è –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤ üóì\n" \
                          f"‚úîÔ∏è –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–∞–Ω–æ: {len(selected_events)} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫(–∫–∏)\n" \
                          f"‚úîÔ∏è –ü—Ä–æ—à–ª–æ: {passed_events_count} \n(–Ω–µ —É—á–∏—Ç—ã–≤–∞—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å)\n" \
                          f"‚úîÔ∏è –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {upcoming_events_count}"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É "–ù–∞–∑–∞–¥"
        back_keyboard = types.InlineKeyboardMarkup()
        menu_button = types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ú–µ–Ω—é", callback_data="menu")
        back_keyboard.add(menu_button)
        bot.send_message(call.message.chat.id, summary_message, reply_markup=back_keyboard)


@bot.message_handler(commands=['pay_menu'])
def pay_menu(message):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
                                        "/pay_mounth –û–ø–ª–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü üìÜ\n"
                                        "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ–± –æ–ø–ª–∞—Ç–µ\n\n"
                                        "/pay_year –û–ø–ª–∞—Ç—ã –∑–∞ –≥–æ–¥ - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤ –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –æ–ø–ª–∞—Ç–∞–º\n\n"
                                        "–û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –º–µ–Ω—é\n\n"
    )

# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "/pay"
@bot.message_handler(commands=['pay'])
def pay(message):
    try:
        # –ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞: \n‚ñ™Ô∏è –ø—Ä–∏–º–µ—Ä - –í–∞—Å—è –ø—É–ø–∫–∏–Ω\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ üëâüèª/cancel")
        bot.register_next_step_handler(message, process_client_name)
    except Exception as e:
        bot.send_message(message.chat.id,
                         "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def process_client_name(message):
    client_name = message.text
    if client_name == '/cancel':
        bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å—å –æ–ø–ª–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    try:
        # –ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–Ω—è—Ç–∏–π
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π: \n‚ñ™Ô∏è —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ üëâüèª/cancel")
        bot.register_next_step_handler(message, process_session_count, client_name)
    except Exception as e:
        bot.send_message(message.chat.id,
                         "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def process_session_count(message, client_name):
    session_count = message.text
    if session_count == '/cancel':
        bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å—å –æ–ø–ª–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    if not session_count.isdigit():
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤ \n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ üëâüèª/cancel")
        bot.register_next_step_handler(message, process_session_count, client_name)
        return
    try:
        # –ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã: \n‚ñ™Ô∏è —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ üëâüèª/cancel")
        bot.register_next_step_handler(message, process_payment_amount, client_name, session_count)
    except Exception as e:
        bot.send_message(message.chat.id,
                         "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def process_payment_amount(message, client_name, session_count):
    payment_amount = message.text
    if payment_amount == '/cancel':
        bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å—å –æ–ø–ª–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    if not payment_amount.isdigit():
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤ \n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ üëâüèª/cancel")
        bot.register_next_step_handler(message, process_payment_amount, client_name, session_count)
        return

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL
        mydb = mysql.connector.connect(
            host="akueyoungep.beget.app",
            port="3306",
            user="mymoney",
            password="g0MSegH7sZT*",
            database="mymoney",
            autocommit=True
        )
        if mydb.is_connected():
            print("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL")
            mydb.cursor()
        # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø–ª–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        with mydb.cursor() as cursor:
            insert_query = "INSERT INTO PAY (telegram, name, info, sum, data) VALUES (%s, %s, %s, %s, %s)"
            current_datetime = datetime.datetime.now()
            values = (message.from_user.id, client_name, session_count, payment_amount, current_datetime)
            cursor.execute(insert_query, values)
            mydb.commit()
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.send_message(message.chat.id, text=(
            "–î–∞–Ω–Ω—ã–µ –æ–± –æ–ø–ª–∞—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —ç—Ç–æ–º –º–µ–Ω—é:\n\n"
                "/pay  –î–æ–±–∞–≤–∏—Ç—å üìò\n"
                "/del_pay  –£–¥–∞–ª–∏—Ç—å ‚ùå\n"
                "/pay_mounth –û–ø–ª–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü üìÜ\n"
                "/pay_year –û–ø–ª–∞—Ç—ã –∑–∞ –≥–æ–¥ üìÜ\n\n"
            "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –µ—ë –∑–¥–µ—Å—å —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤—ã—à–µ:\n"
                "/clients - üìì –ö–õ–ò–ï–ù–¢–´\n"
                "/week_events - üóì –†–ê–°–ü–ò–°–ê–ù–ò–ï –ù–ê –ù–ï–î–ï–õ–Æ\n"
                "/pay_menu - üíµ –û–ø–ª–∞—Ç—ã\n"
                "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        ))
    except Exception as e:
        bot.send_message(message.chat.id,
                         "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "/pay_mounth"
@bot.message_handler(commands=['pay_mounth'])
def pay_mounth(message):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL
    mydb = mysql.connector.connect(
        host="akueyoungep.beget.app",
        port="3306",
        user="mymoney",
        password="g0MSegH7sZT*",
        database="mymoney",
        autocommit=True
    )
    if mydb.is_connected():
        print("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL")
        mydb.cursor()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ –∏ –º–µ—Å—è—Ü–∞
    current_year = datetime.datetime.now().year
    current_month = datetime.datetime.now().month

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –æ–ø–ª–∞—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with mydb.cursor() as cursor:
        select_query = "SELECT * FROM PAY WHERE YEAR(data) = %s AND MONTH(data) = %s AND telegram = %s"
        values = (current_year, current_month, message.from_user.id)
        cursor.execute(select_query, values)
        result = cursor.fetchall()

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—É–º–º—ã –≤—Å–µ—Ö –æ–ø–ª–∞—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    total_sum = 0
    for row in result:
        total_sum += row[4]
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    response = "–û–ø–ª–∞—Ç—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:\n"
    counter = 1
    for row in result:
        response += f"‚Ññ: {row[0]}  {row[2]}\n"
        response += f"–°—É–º–º–∞: {row[4]} –ö–æ–ª-–≤–æ –ü–¢: {row[3]}\n"
        response += f"–î–∞—Ç–∞: {row[5]}\n"
        response += "------------------------\n"
        counter += 1
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É–º–º—ã –≤—Å–µ—Ö –æ–ø–ª–∞—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∫ –æ—Ç–≤–µ—Ç—É
    response += f"–°—É–º–º–∞ –æ–ø–ª–∞—Ç –∑–∞ –º–µ—Å—è—Ü: {total_sum} P"

    bot.send_message(message.chat.id, response)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.send_message(message.chat.id, text=(
        "/pay  –î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—Éüìò\n"
        "/del_pay  –£–¥–∞–ª–∏—Ç—å –æ–ø–ª–∞—Ç—É‚ùå\n"
        "/pay_year –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø–ª–∞—Ç—ã –∑–∞ –≥–æ–¥ üìÜ\n\n"
        "–û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –º–µ–Ω—é\n\n"
    ))
    mydb.commit()
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–Ω–æ–ø–∫—É "del_pay"
@bot.message_handler(commands=['del_pay'])
def handle_del_pay(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    bot.register_next_step_handler(message, delete_payment)
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def delete_payment(message):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL
    mydb = mysql.connector.connect(
        host="akueyoungep.beget.app",
        port="3306",
        user="mymoney",
        password="g0MSegH7sZT*",
        database="mymoney",
        autocommit=True
    )
    if mydb.is_connected():
        print("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL")
        mydb.cursor()

    payment_number = message.text

    with mydb.cursor() as cursor:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
        select_query = "SELECT * FROM PAY WHERE id = %s AND telegram = %s"
        values = (payment_number, message.from_user.id)
        cursor.execute(select_query, values)
        result = cursor.fetchone()

        if result is None:
            bot.send_message(message.chat.id, f"–¢–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ —Å –Ω–æ–º–µ—Ä–æ–º {payment_number} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
            delete_query = "DELETE FROM PAY WHERE id = %s AND telegram = %s"
            cursor.execute(delete_query, values)
            bot.send_message(message.chat.id, f"–ó–∞–ø–∏—Å—å —Å –Ω–æ–º–µ—Ä–æ–º {payment_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            bot.send_message(message.chat.id, text=(
                "/pay_mounth –û–ø–ª–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü üìÜ\n"
                "/pay_year –û–ø–ª–∞—Ç—ã –∑–∞ –≥–æ–¥ üìÜ\n\n"
                "–û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –º–µ–Ω—é\n\n"
            ))

    mydb.commit()

# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "/pay_year"
@bot.message_handler(commands=['pay_year'])
def pay_year(message):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL
    mydb = mysql.connector.connect(
        host="akueyoungep.beget.app",
        port="3306",
        user="mymoney",
        password="g0MSegH7sZT*",
        database="mymoney",
        autocommit=True
    )
    if mydb.is_connected():
        print("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL")
        mydb.cursor()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ –∏ –º–µ—Å—è—Ü–∞
    current_year = datetime.datetime.now().year
    current_month = datetime.datetime.now().month

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—É–º–º –æ–ø–ª–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
    monthly_sums = {}

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –æ–ø–ª–∞—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with mydb.cursor() as cursor:
        select_query = "SELECT * FROM PAY WHERE YEAR(data) = %s AND telegram = %s"
        values = (current_year, message.from_user.id)
        cursor.execute(select_query, values)
        result = cursor.fetchall()

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—É–º–º –æ–ø–ª–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
    for row in result:
        month = row[5].month
        if month in monthly_sums:
            monthly_sums[month] += row[4]
        else:
            monthly_sums[month] = row[4]

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—É–º–º—ã –æ–ø–ª–∞—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    current_month_sum = monthly_sums.get(current_month, 0)

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—É–º–º—ã –æ–ø–ª–∞—Ç –∑–∞ –≤–µ—Å—å –≥–æ–¥
    total_year_sum = sum(monthly_sums.values())

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å —Å—É–º–º–∞–º–∏ –æ–ø–ª–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
    response = f"–û–ø–ª–∞—Ç—ã –∑–∞ –≥–æ–¥ {current_year}:\n"
    for month in range(1, 13):
        month_name = datetime.date(current_year, month, 1).strftime('%B')
        total_sum = monthly_sums.get(month, 0)
        response += f"{month_name} - {total_sum} P\n"

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É–º–º—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –∑–∞ –≤–µ—Å—å –≥–æ–¥ –∫ —Å—Ç—Ä–æ–∫–µ –æ—Ç–≤–µ—Ç–∞
    response += f"\n–°—É–º–º–∞ –æ–ø–ª–∞—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {current_month_sum} P"
    response += f"\n–°—É–º–º–∞ –æ–ø–ª–∞—Ç –∑–∞ –≤–µ—Å—å –≥–æ–¥: {total_year_sum} P"

    bot.send_message(message.chat.id, response)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.send_message(message.chat.id, text=(
                "/pay_mounth –û–ø–ª–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü üìÜ\n"
                "/pay_year –û–ø–ª–∞—Ç—ã –∑–∞ –≥–æ–¥ üìÜ\n\n"
                "–û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –º–µ–Ω—é\n\n"
            ))
    mydb.commit()
bot.polling()

